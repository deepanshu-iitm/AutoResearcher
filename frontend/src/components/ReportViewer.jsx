import React, { useState } from 'react'
import { FileText, Download, Copy, CheckCircle, ExternalLink, Calendar, Users, BookOpen } from 'lucide-react'

const ReportViewer = ({ report, isGenerating }) => {
  const [copied, setCopied] = useState(false)

  // Helper function to get report content from different formats
  const getReportContent = () => {
    if (!report) return ''
    // Handle different report formats - ensure we return a string
    const content = report.report || report.content || report
    return typeof content === 'string' ? content : ''
  }

  const getReportGoal = () => {
    if (!report) return 'research_report'
    return report.goal || report.title || 'research_report'
  }

  const handleCopy = async () => {
    const content = getReportContent()
    if (content && typeof content === 'string') {
      await navigator.clipboard.writeText(content)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    }
  }

  const handleDownload = () => {
    const reportContent = getReportContent(report)
    if (reportContent) {
      // Create a DOCX-compatible HTML version
      const docxContent = `
<!DOCTYPE html>
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word">
<head>
    <meta charset="UTF-8">
    <title>AutoResearcher Report</title>
    <!--[if gte mso 9]>
    <xml>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotPromptForConvert/>
            <w:DoNotShowInsertionsAndDeletions/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
        body { font-family: 'Times New Roman', serif; font-size: 12pt; line-height: 1.5; margin: 1in; }
        h1 { font-size: 18pt; font-weight: bold; margin-bottom: 12pt; text-align: center; }
        h2 { font-size: 14pt; font-weight: bold; margin-top: 18pt; margin-bottom: 6pt; }
        h3 { font-size: 12pt; font-weight: bold; margin-top: 12pt; margin-bottom: 6pt; }
        p { margin-bottom: 6pt; text-align: justify; }
        ul, ol { margin-left: 0.5in; }
        .header { text-align: center; margin-bottom: 24pt; }
        .date { font-style: italic; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h1>AutoResearcher Report</h1>
        <p class="date">Generated on ${new Date().toLocaleDateString()}</p>
    </div>
    
    ${reportContent.replace(/\n/g, '<br>').replace(/## /g, '<h2>').replace(/<br><h2>/g, '</p><h2>').replace(/# /g, '<h1>').replace(/<br><h1>/g, '</p><h1>')}
    
    <hr>
    <p><em>Generated by AutoResearcher - Autonomous AI Research Assistant</em></p>
</body>
</html>`
      
      const blob = new Blob([docxContent], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `research-report-${new Date().toISOString().split('T')[0]}.doc`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    }
  }

  if (isGenerating) {
    return (
      <div className="text-center py-12">
        <div className="animate-pulse">
          <div className="bg-dark-800 rounded-lg p-8 max-w-md mx-auto">
            <FileText className="h-12 w-12 text-primary-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-white mb-2">Generating Report</h3>
            <p className="text-gray-400">Please wait while we analyze your research...</p>
          </div>
        </div>
      </div>
    )
  }

  if (!report) {
    return (
      <div className="text-center py-12">
        <div className="card max-w-md mx-auto">
          <FileText className="h-12 w-12 text-gray-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-white mb-2">No Report Generated</h3>
          <p className="text-gray-400">
            Generate a research report from the Research tab to view it here.
          </p>
        </div>
      </div>
    )
  }

  const stats = report.collection_stats || {}
  const sources = stats.sources || {}
  
  // Ensure sources is an object and handle any potential data structure issues
  const sourcesData = typeof sources === 'object' && sources !== null ? sources : {}

  return (
    <div className="space-y-6">
      {/* Report Header */}
      <div className="card">
        <div className="flex items-start justify-between mb-4">
          <div>
            <h2 className="text-2xl font-bold text-white mb-2">{report.goal}</h2>
            <div className="flex items-center space-x-4 text-sm text-gray-400">
              <div className="flex items-center space-x-1">
                <BookOpen className="h-4 w-4" />
                <span>{report.document_count || 0} documents</span>
              </div>
              <div className="flex items-center space-x-1">
                <Users className="h-4 w-4" />
                <span>{Object.keys(sourcesData).length} sources</span>
              </div>
              <div className="flex items-center space-x-1">
                <Calendar className="h-4 w-4" />
                <span>Generated now</span>
              </div>
            </div>
          </div>
          
          <div className="flex space-x-2">
            <button
              onClick={handleCopy}
              className="btn-secondary flex items-center space-x-2"
            >
              {copied ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
              <span>{copied ? 'Copied!' : 'Copy'}</span>
            </button>
            <button
              onClick={handleDownload}
              className="btn-primary flex items-center space-x-2"
            >
              <Download className="h-4 w-4" />
              <span>Download</span>
            </button>
          </div>
        </div>

        {/* Source Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {Object.entries(sourcesData).map(([source, data]) => {
            // Extract count from the data object
            const count = typeof data === 'object' && data !== null ? 
              (data.count || data.documents?.length || Object.keys(data).length || 0) : 
              data;
            
            return (
              <div key={source} className="bg-dark-700 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 font-medium capitalize">{source}</span>
                  <span className="text-primary-400 font-semibold">{count}</span>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {/* Report Content */}
      <div className="card">
        <div className="prose prose-invert max-w-none">
          <div 
            className="markdown-content text-gray-300 leading-relaxed"
            dangerouslySetInnerHTML={{ 
              __html: (() => {
                const content = getReportContent()
                if (!content || typeof content !== 'string') {
                  return '<p class="text-gray-400">No report content available.</p>'
                }
                
                try {
                  return content
                    .replace(/^# /gm, '<h1 class="text-2xl font-bold text-white mb-4 mt-6">')
                    .replace(/^## /gm, '<h2 class="text-xl font-semibold text-white mb-3 mt-5">')
                    .replace(/^### /gm, '<h3 class="text-lg font-medium text-white mb-2 mt-4">')
                    .replace(/\*\*(.*?)\*\*/g, '<strong class="text-white font-semibold">$1</strong>')
                    .replace(/\*(.*?)\*/g, '<em class="text-gray-300 italic">$1</em>')
                    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-primary-400 hover:text-primary-300 underline inline-flex items-center gap-1">$1 <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg></a>')
                    .replace(/^- /gm, '<li class="mb-1">â€¢ ')
                    .replace(/^\d+\. /gm, '<li class="mb-1 list-decimal">') 
                    .replace(/\n\n/g, '</p><p class="mb-4">')
                    .replace(/^([^<\n].*)$/gm, '<p class="mb-4">$1</p>')
                } catch (error) {
                  console.error('Error rendering markdown:', error)
                  return `<p class="text-gray-400">Error rendering report content.</p><pre class="text-xs text-gray-500 mt-2">${content}</pre>`
                }
              })()
            }}
          />
        </div>
      </div>
    </div>
  )
}

export default ReportViewer
